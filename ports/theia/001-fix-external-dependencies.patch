diff --git a/cmake/TheiaConfig.cmake.in b/cmake/TheiaConfig.cmake.in
--- a/cmake/TheiaConfig.cmake.in	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/cmake/TheiaConfig.cmake.in	(date 1718780964869)
@@ -43,7 +43,7 @@
   # use the camelcase library name, not uppercase.
   if (Theia_FIND_QUIETLY)
     message(STATUS "Failed to find Theia - " ${REASON_MSG} ${ARGN})
-  else (Theia_FIND_REQUIRED)
+  elseif (Theia_FIND_REQUIRED)
     message(FATAL_ERROR "Failed to find Theia - " ${REASON_MSG} ${ARGN})
   else()
     # Neither QUIETLY nor REQUIRED, use SEND_ERROR which emits an error
@@ -101,14 +101,16 @@
 # TheiaTargets-<release/debug>.cmake as link libraries for Theia target.
 set(THEIA_INCLUDE_DIRS ${THEIA_INCLUDE_DIR})
 
+include(CMakeFindDependencyMacro)
+
 # Eigen.
 # Flag set during configuration and build of Theia.
-set(THEIA_EIGEN_VERSION @EIGEN_VERSION@)
+set(THEIA_EIGEN_VERSION @EIGEN3_VERSION@)
 # Append the locations of Eigen when Theia was built to the search path hints.
-list(APPEND EIGEN_INCLUDE_DIR_HINTS @EIGEN_INCLUDE_DIR@)
+list(APPEND EIGEN_INCLUDE_DIR_HINTS @EIGEN3_INCLUDE_DIR@)
 # Search quietly s/t we control the timing of the error message if not found.
-find_package(Eigen ${THEIA_EIGEN_VERSION} EXACT QUIET)
-if (EIGEN_FOUND)
+find_dependency(Eigen3 ${THEIA_EIGEN_VERSION} REQUIRED)
+if (TRUE)
   message(STATUS "Found required Theia dependency: "
     "Eigen version ${THEIA_EIGEN_VERSION} in ${EIGEN_INCLUDE_DIRS}")
 else (EIGEN_FOUND)
@@ -116,16 +118,11 @@
     "dependency: Eigen version ${THEIA_EIGEN_VERSION}, please set "
     "EIGEN_INCLUDE_DIR.")
 endif (EIGEN_FOUND)
-list(APPEND THEIA_INCLUDE_DIRS ${EIGEN_INCLUDE_DIRS})
+list(APPEND THEIA_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIRS})
 
 # Ceres.
-# Append the locations of ceres when Theia was built to the search path hints.
-list(APPEND CERES_INCLUDE_DIR_HINTS @CERES_INCLUDE_DIR@)
-get_filename_component(THEIA_BUILD_CERES_LIBRARY_DIR @CERES_LIBRARIES@ PATH)
-list(APPEND CERES_LIBRARY_DIR_HINTS ${THEIA_BUILD_CERES_LIBRARY_DIR})
-# Search quietly s/t we control the timing of the error message if not found.
-find_package(Ceres QUIET)
-if (CERES_FOUND)
+find_dependency(Ceres REQUIRED CONFIG)
+if (TRUE)
   message(STATUS "Found required Theia dependency: "
     "Ceres in ${CERES_INCLUDE_DIRS}")
 else (CERES_FOUND)
@@ -135,13 +132,8 @@
 list(APPEND THEIA_INCLUDE_DIRS ${CERES_INCLUDE_DIRS})
 
 # Glog.
-# Append the locations of glog when Theia was built to the search path hints.
-list(APPEND GLOG_INCLUDE_DIR_HINTS @GLOG_INCLUDE_DIR@)
-get_filename_component(THEIA_BUILD_GLOG_LIBRARY_DIR @GLOG_LIBRARY@ PATH)
-list(APPEND GLOG_LIBRARY_DIR_HINTS ${THEIA_BUILD_GLOG_LIBRARY_DIR})
-# Search quietly s/t we control the timing of the error message if not found.
-find_package(Glog QUIET)
-if (GLOG_FOUND)
+find_dependency(Glog REQUIRED CONFIG)
+if (TRUE)
   message(STATUS "Found required Theia dependency: "
     "Glog in ${GLOG_INCLUDE_DIRS}")
 else (GLOG_FOUND)
@@ -152,8 +144,8 @@
 
 # GFlags. The namespace patch is borrow from Ceres Solver (see license in
 # FindGflags.cmake)
-find_package(Gflags QUIET)
-if (GFLAGS_FOUND)
+find_dependency(Gflags REQUIRED CONFIG)
+if (TRUE)
   message(STATUS "Found required Theia dependency: Google Flags in "
     "${GFLAGS_INCLUDE_DIRS} in namespace: ${GFLAGS_NAMESPACE}")
   add_definitions(-DTHEIA_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})
@@ -164,8 +156,8 @@
 list(APPEND THEIA_INCLUDE_DIRS ${GFLAGS_INCLUDE_DIRS})
 
 # OpenImageIO
-find_package(OpenImageIO QUIET)
-if (OPENIMAGEIO_FOUND)
+find_dependency(OpenImageIO REQUIRED CONFIG)
+if (TRUE)
   message(STATUS "Found Theia dependency: OpenImageIO in ${OPENIMAGEIO_INCLUDE_DIRS}")
 else (OPENIMAGEIO_FOUND)
   theia_report_not_found("Missing required Theia dependency: OpenImageIO. Please set "
@@ -173,8 +165,8 @@
 endif (OPENIMAGEIO_FOUND)
 list(APPEND THEIA_INCLUDE_DIRS ${OPENIMAGEIO_INCLUDE_DIRS})
 
-find_package(RocksDB)
-if (ROCKSDB_FOUND)
+find_dependency(RocksDB REQUIRED CONFIG)
+if (TRUE)
   message(STATUS "Found RocksDB: ${ROCKSDB_INCLUDE_DIRS}")
 else (ROCKSDB_FOUND)
 theia_report_not_found("Missing required Theia dependence: RocksDB. Please "
@@ -182,8 +174,11 @@
 endif (ROCKSDB_FOUND)
 list(APPEND THEIA_INCLUDE_DIRS ${ROCKSDB_INCLUDE_DIRS})
 
-find_package(SuiteSparse QUIET)
-if (SUITESPARSE_FOUND)
+find_dependency(RapidJSON REQUIRED)
+list(APPEND THEIA_LIBRARIES ${RapidJSON_LIBRARIES})
+
+find_dependency(SuiteSparse REQUIRED CONFIG)
+if (TRUE)
   # On Ubuntu the system install of SuiteSparse (v3.4.0) up to at least
   # Ubuntu 13.10 cannot be used to link shared libraries.
   if (BUILD_SHARED_LIBS AND
@@ -209,6 +204,17 @@
 endif (SUITESPARSE_FOUND)
 list(APPEND THEIA_INCLUDE_DIRS ${SUITESPARSE_INCLUDE_DIRS})
 
+find_dependency(cereal REQUIRED CONFIG)
+list(APPEND THEIA_LIBRARIES cereal)
+
+find_dependency(Flann REQUIRED CONFIG)
+list(APPEND THEIA_INCLUDE_DIRS ${FLANN_INCLUDE_DIR})
+list(APPEND THEIA_LIBRARIES ${FLANN_LIBRARY})
+
+find_dependency(spectra REQUIRED CONFIG)
+list(APPEND THEIA_LIBRARIES Spectra::Spectra)
+
+
 # Import exported Theia targets.
 if (NOT TARGET theia AND NOT Theia_BINARY_DIR)
   include(${THEIA_CURRENT_CONFIG_INSTALL_DIR}/TheiaTargets.cmake)
@@ -221,17 +230,12 @@
 set(THEIA_INTERNAL_LIBS_INCLUDES
   ${THEIA_INTERNAL_LIB_PREFIX}
   ${THEIA_INTERNAL_LIB_PREFIX}/akaze
-  ${THEIA_INTERNAL_LIB_PREFIX}/cereal
-  ${THEIA_INTERNAL_LIB_PREFIX}/cereal/include
-  ${THEIA_INTERNAL_LIB_PREFIX}/flann
-  ${THEIA_INTERNAL_LIB_PREFIX}/gtest
-  ${THEIA_INTERNAL_LIB_PREFIX}/gtest/include
   ${THEIA_INTERNAL_LIB_PREFIX}/optimo
-  ${THEIA_INTERNAL_LIB_PREFIX}/spectra
   ${THEIA_INTERNAL_LIB_PREFIX}/statx
   ${THEIA_INTERNAL_LIB_PREFIX}/stlplus3
   ${THEIA_INTERNAL_LIB_PREFIX}/vlfeat
-  ${THEIA_INTERNAL_LIB_PREFIX}/visual_sfm)
+  ${THEIA_INTERNAL_LIB_PREFIX}/visual_sfm
+)
 
 list(APPEND THEIA_INCLUDE_DIRS ${THEIA_INTERNAL_LIBS_INCLUDES})
 
diff --git a/src/theia/CMakeLists.txt b/src/theia/CMakeLists.txt
--- a/src/theia/CMakeLists.txt	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/src/theia/CMakeLists.txt	(date 1718780483582)
@@ -217,14 +217,14 @@
   ${CERES_LIBRARIES}
   ${GFLAGS_LIBRARIES}
   ${GLOG_LIBRARIES}
-  ${OPENIMAGEIO_LIBRARIES}
+  OpenImageIO::OpenImageIO
   ${ROCKSDB_LIBRARIES}
   ${SUITESPARSE_LIBRARIES}
   akaze
-  flann_cpp
+  Spectra::Spectra
   statx
   stlplus3
   vlfeat
   visual_sfm
 )
 
diff --git a/libraries/optimo/CMakeLists.txt b/libraries/optimo/CMakeLists.txt
--- a/libraries/optimo/CMakeLists.txt	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/libraries/optimo/CMakeLists.txt	(date 1718780483562)
@@ -67,11 +67,11 @@
 
 # Locations to search for Eigen
 # Eigen
-find_package(Eigen REQUIRED)
-if (EIGEN_FOUND)
-  message("-- Found Eigen version ${EIGEN_VERSION}: ${EIGEN_INCLUDE_DIRS}")
-endif (EIGEN_FOUND)
-include_directories(${EIGEN_INCLUDE_DIRS})
+find_package(Eigen3 REQUIRED CONFIG)
+if (EIGEN3_FOUND)
+  message("-- Found Eigen version ${EIGEN3_VERSION_STRING}: ${EIGEN3_INCLUDE_DIRS}")
+endif (EIGEN3_FOUND)
+include_directories(${EIGEN3_INCLUDE_DIRS})
 
 # Setting CXX FLAGS appropriately. The code below was inspired from
 # Google CERES and modified for this library.
diff --git a/libraries/CMakeLists.txt b/libraries/CMakeLists.txt
--- a/libraries/CMakeLists.txt	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/libraries/CMakeLists.txt	(date 1718780964853)
@@ -5,12 +5,6 @@
 # AKAZE feature extractor.
 add_subdirectory(akaze)
 
-# Cereal for portable IO.
-add_subdirectory(cereal)
-
-# Flann for fast approximate nearest neighbor searches.
-add_subdirectory(flann)
-
 # Add Optimo.
 add_subdirectory(optimo)

diff --git a/libraries/statx/CMakeLists.txt b/libraries/statx/CMakeLists.txt
--- a/libraries/statx/CMakeLists.txt	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/libraries/statx/CMakeLists.txt	(date 1718780483570)
@@ -72,11 +72,11 @@
 option(STATX_WITH_CERES "Enables GEV parameter estimation using Ceres" ON)
 
 # Eigen
-find_package(Eigen REQUIRED)
-if (EIGEN_FOUND)
-  message("-- Found Eigen version ${EIGEN_VERSION}: ${EIGEN_INCLUDE_DIRS}")
-endif (EIGEN_FOUND)
-include_directories(${EIGEN_INCLUDE_DIRS})
+find_package(Eigen3 REQUIRED CONFIG)
+if (EIGEN3_FOUND)
+  message("-- Found Eigen version ${EIGEN3_VERSION_STRING}: ${EIGEN3_INCLUDE_DIRS}")
+endif (EIGEN3_FOUND)
+include_directories(${EIGEN3_INCLUDE_DIRS})
 
 # Google Flags
 find_package(Gflags REQUIRED)
@@ -129,7 +129,6 @@
 
 # Setting CXX FLAGS appropriately. The code below was inspired from
 # Google CERES and modified for this library.
-set (CMAKE_BUILD_TYPE Release)
 set (STATX_CXX_FLAGS)
 
 if (CMAKE_BUILD_TYPE STREQUAL "Release")
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision d2112f15aa69a53dda68fe6c4bd4b0f1e2fe915b)
+++ b/CMakeLists.txt	(date 1718780964861)
@@ -105,10 +105,10 @@
 
 # Eigen
 set(MIN_EIGEN_VERSION 3.2.0)
-find_package(Eigen ${MIN_EIGEN_VERSION} REQUIRED)
-if (EIGEN_FOUND)
-  message("-- Found Eigen version ${EIGEN_VERSION}: ${EIGEN_INCLUDE_DIRS}")
-endif (EIGEN_FOUND)
+find_package(Eigen3 ${MIN_EIGEN_VERSION} REQUIRED CONFIG)
+if (EIGEN3_FOUND)
+  message("-- Found Eigen version ${EIGEN3_VERSION}: ${EIGEN3_INCLUDE_DIRS}")
+endif (EIGEN3_FOUND)
 
 # Use a larger inlining threshold for Clang, since it hobbles Eigen,
 # resulting in an unreasonably slow version of the blas routines. The
@@ -129,8 +129,9 @@
 
 # GFlags. The namespace patch is borrow from Ceres Solver (see license in
 # FindGflags.cmake)
+message("-- Check for Google Flags")
 find_package(Gflags REQUIRED)
-if (GFLAGS_FOUND)
+if (TRUE)
   message("-- Found Google Flags: ${GFLAGS_INCLUDE_DIRS} in namespace: ${GFLAGS_NAMESPACE}")
   add_definitions(-DTHEIA_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})
 else (GFLAGS_FOUND)
@@ -140,17 +141,21 @@
 # Google Logging
 message("-- Check for Google Log")
 find_package(Glog REQUIRED)
-if (GLOG_FOUND)
+if (TRUE)
   message("-- Found Google Logging: ${GLOG_INCLUDE_DIRS}")
 else (GLOG_FOUND)
   message(FATAL_ERROR "Can't find Google Logging. Please set GLOG_INCLUDE_DIR & "
     "GLOG_LIBRARY")
 endif (GLOG_FOUND)
 
+# Flann
+message("-- Check for Flann")
+find_package(Flann REQUIRED CONFIG)
+
 # Ceres
 message("-- Check for Ceres")
 find_package(Ceres REQUIRED SuiteSparse)
-if (CERES_FOUND)
+if (TRUE)
   message("-- Found Ceres: ${CERES_INCLUDE_DIRS}")
 else (CERES_FOUND)
   message(FATAL_ERROR "Can't find Ceres. Please set CERES_INCLUDE_DIR & "
@@ -160,7 +165,7 @@
 # OpenImageIO
 message("-- Check for OpenImageIO")
-find_package(OpenImageIO REQUIRED)
+find_package(OpenImageIO REQUIRED)
-if (OPENIMAGEIO_FOUND)
+if (TRUE)
   message("-- Found OpenImageIO: ${OPENIMAGEIO_INCLUDE_DIRS}")
 else (OPENIMAGEIO_FOUND)
   message(FATAL_ERROR "Can't find OpenImageIO. Please set OPENIMAGEIO_INCLUDE_DIR & "
@@ -169,7 +174,7 @@
 
 # Suitesparse
 find_package(SuiteSparse REQUIRED)
-if (SUITESPARSE_FOUND)
+if (TRUE)
   # On Ubuntu the system install of SuiteSparse (v3.4.0) up to at least
   # Ubuntu 13.10 cannot be used to link shared libraries.
   if (BUILD_SHARED_LIBS AND
@@ -194,11 +199,13 @@
     "Please set SUITESPARSE_INCLUDE_DIR & SUITESPARSE_LIBRARY")
 endif (SUITESPARSE_FOUND)

+
+find_package(spectra REQUIRED)
 
 # RocksDB
 message("-- Check for RocksDB")
 find_package(RocksDB REQUIRED)
-if (ROCKSDB_FOUND)
+if (TRUE)
   message("-- Found RocksDB: ${ROCKSDB_INCLUDE_DIR}")
 else (ROCKSDB_FOUND)
   message(FATAL_ERROR "Can't find RocksDB. Please set ROCKSDB_INCLUDE_DIR & ROCKSDB_LIBRARY to use RocksDB.")
@@ -207,7 +214,7 @@
 # RapidJSON.
 message("-- Check for RapidJSON")
 find_package(RapidJSON REQUIRED)
-if (RapidJSON_FOUND)
+if (TRUE)
   message("-- Found RapidJSON: ${RAPIDJSON_INCLUDE_DIRS}")
 else (RapidJSON_FOUND)
   message(FATAL_ERROR "Can't find RapidJSON. Please set RAPIDJSON_INCLUDE_DIRS to use RapidJSON.")
@@ -243,27 +250,23 @@
 add_subdirectory(libraries)
 include_directories(
   libraries
-  libraries/spectra
   ${akaze_SOURCE_DIR}
   ${akaze_INCLUDE_DIR}
-  ${cereal_SOURCE_DIR}
-  ${cereal_SOURCE_DIR}/include
-  ${flann_SOURCE_DIR}
-  ${flann_SOURCE_DIR}/src/cpp
-  ${gtest_SOURCE_DIR}/include
-  ${gtest_SOURCE_DIR}
   ${optimo_SOURCE_DIR}
   ${statx_SOURCE_DIR}
   ${stlplus3_SOURCE_DIR}
   ${vlfeat_SOURCE_DIR}
-  ${visual_sfm_SOURCE_DIR})
+  ${visual_sfm_SOURCE_DIR}
+)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
 include(OptimizeTheiaCompilerFlags)
 optimizetheiacompilerflags()
 
 add_subdirectory(src/theia)
-add_subdirectory(applications)
+if(BUILD_APPLICATIONS)
+  add_subdirectory(applications)
+endif()
 
 if (BUILD_DOCUMENTATION)
   message("-- Documentation building is enabled")
@@ -281,7 +284,12 @@
 file(GLOB_RECURSE THEIA_INTERNAL_HDRS ${CMAKE_SOURCE_DIR}/src/theia/*.h)
 install(DIRECTORY src/theia/ DESTINATION include/theia FILES_MATCHING PATTERN "*.h")
 
-install(DIRECTORY libraries/ DESTINATION include/theia/libraries FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/akaze/ DESTINATION include/theia/libraries/akaze FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/optimo/ DESTINATION include/theia/libraries/optimo FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/statx/ DESTINATION include/theia/libraries/statx FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/stlplus3/ DESTINATION include/theia/libraries/stlplus3 FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/visual_sfm/ DESTINATION include/theia/libraries/visual_sfm FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/vlfeat/ DESTINATION include/theia/libraries/vlfeat FILES_MATCHING PATTERN "*.h*")

 # Add an uninstall target to remove all installed files.
 configure_file("${CMAKE_SOURCE_DIR}/cmake/uninstall.cmake.in"
@@ -293,17 +301,10 @@
 
 # Set up install directories. INCLUDE_INSTALL_DIR, LIB_INSTALL_DIR and
 # CMAKECONFIG_INSTALL_DIR must not be absolute paths.
-if (WIN32)
-  set(INCLUDE_INSTALL_DIR Include)
-  set(LIB_INSTALL_DIR Lib)
-  set(CMAKECONFIG_INSTALL_DIR CMake)
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR CMake)
-else ()
-  set(INCLUDE_INSTALL_DIR include)
-  set(LIB_INSTALL_DIR lib)
-  set(CMAKECONFIG_INSTALL_DIR share/Theia)
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR share/Theia)
-endif ()
+set(INCLUDE_INSTALL_DIR include)
+set(LIB_INSTALL_DIR lib)
+set(CMAKECONFIG_INSTALL_DIR share/theia)
+set(RELATIVE_CMAKECONFIG_INSTALL_DIR share/theia)
 
 # This "exports" all targets which have been put into the export set
 # "TheiaExport". This means that CMake generates a file with the given
@@ -340,10 +341,4 @@
 # in the public API of Theia and should thus be present in THEIA_INCLUDE_DIRS.
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/TheiaConfig.cmake"
               "${CMAKE_CURRENT_BINARY_DIR}/TheiaConfigVersion.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindEigen.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindGlog.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindGflags.cmake"
-	            "${CMAKE_SOURCE_DIR}/cmake/FindOpenImageIO.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindRocksDB.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindSuiteSparse.cmake"
               DESTINATION ${CMAKECONFIG_INSTALL_DIR})
diff --git a/libraries/vlfeat/CMakeLists.txt b/libraries/vlfeat/CMakeLists.txt
index 7f4ffc7..15bca12 100644
--- a/libraries/vlfeat/CMakeLists.txt
+++ b/libraries/vlfeat/CMakeLists.txt
@@ -18,14 +18,19 @@ set(vl_sources
   vl/random.c
   vl/sift.c
   vl/vlad.c)
+
 set_source_files_properties(${vl_sources} PROPERTIES LANGUAGE C)

+add_library(vlfeat ${vl_sources})
+
 if (MSVC)
-  add_definitions(-DVL_BUILD_DLL)
-  add_definitions(-DVL_DISABLE_SSE2)
+  if(BUILD_SHARED_LIBS)
+    target_compile_definitions(vlfeat PRIVATE VL_BUILD_DLL)
+    target_compile_definitions(vlfeat INTERFACE BUILD_DLL)
+  endif()
+  target_compile_definitions(vlfeat PUBLIC VL_DISABLE_SSE2)
 endif (MSVC)

-add_library(vlfeat SHARED ${vl_sources})
 install(TARGETS vlfeat
   EXPORT  TheiaExport
   RUNTIME DESTINATION bin
diff --git a/libraries/vlfeat/vl/host.h b/libraries/vlfeat/vl/host.h
index 293fe1f..0ea3d42 100644
--- a/libraries/vlfeat/vl/host.h
+++ b/libraries/vlfeat/vl/host.h
@@ -312,27 +312,31 @@ defined(__DOXYGEN__)
 #if defined(VL_COMPILER_MSC) & ! defined(__DOXYGEN__)
 #  define VL_UNUSED
 #  define VL_INLINE static __inline
-#  define snprintf _snprintf
 #  define isnan _isnan
-#  ifdef VL_BUILD_DLL
+#  if defined(VL_BUILD_DLL)
 #    ifdef __cplusplus
 #      define VL_EXPORT extern "C" __declspec(dllexport)
 #    else
 #      define VL_EXPORT extern __declspec(dllexport)
 #    endif
-#  else
+#  elif defined(VL_DLL)
 #    ifdef __cplusplus
 #      define VL_EXPORT extern "C" __declspec(dllimport)
 #    else
 #      define VL_EXPORT extern __declspec(dllimport)
 #    endif
+#  else
+#    ifdef __cplusplus
+#      define VL_EXPORT extern "C"
+#    else
+#      define VL_EXPORT extern
+#    endif
 #  endif
 #endif

 #if defined(VL_COMPILER_LCC) & ! defined(__DOXYGEN__)
 #  define VL_UNUSED
 #  define VL_INLINE static __inline
-#  define snprintf _snprintf
 #  define isnan _isnan
 VL_INLINE float fabsf(float x) { return (float) fabs((double) x) ; }
 #  ifdef VL_BUILD_DLL
